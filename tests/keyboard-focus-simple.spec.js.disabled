import { test, expect } from '@playwright/test'

async function ensureMarkerExistsIn(container, page) {
  // Click mode switcher if present
  const analysisBtn = container.locator('button:has-text("Analysis"), [aria-label="Analysis"]')
  if (await analysisBtn.count()) {
    await analysisBtn.first().click()
    await page.waitForTimeout(50)
  }

  // Click center of hitlayer/SVG
  const target = container.locator('.gram-frame-hitlayer, .gram-frame-svg')
  await expect(target).toBeVisible({ timeout: 5000 })
  const box = await target.boundingBox()
  if (!box) throw new Error('No bounding box for click target')
  await page.mouse.click(box.x + box.width / 2, box.y + box.height / 2, { force: true })

  // Wait for marker to appear in panel
  const row = container.locator('[data-panel="markers"] tbody tr, .markers table tbody tr')
  await expect(row.first()).toBeVisible({ timeout: 5000 })

  // Try to find visual marker
  const marker = container.locator(
    '.gram-frame-marker, [data-test="marker-cross"], .analysis-marker, .cross-cursor-marker'
  ).first()
  return (await marker.count()) ? marker : row.first()
}

test.describe('Keyboard Focus Behavior', () => {
  test('should only respond to keyboard events in focused instance', async ({ page }) => {
    await page.goto('http://localhost:5173/debug-multiple.html')

    await page.waitForSelector('.gram-frame-container', { timeout: 15000 })
    const containers = await page.locator('.gram-frame-container').count()
    expect(containers).toBe(2)

    const gramFrame1 = page.locator('.gram-frame-container').first()
    const gramFrame2 = page.locator('.gram-frame-container').nth(1)

    const marker1 = await ensureMarkerExistsIn(gramFrame1, page)
    const marker2 = await ensureMarkerExistsIn(gramFrame2, page)

    // Focus on first GramFrame and select its marker
    await gramFrame1.click()
    await marker1.click()
    await page.waitForTimeout(200)

    const initialPos1 = await marker1.boundingBox()
    const initialPos2 = await marker2.boundingBox()
    expect(initialPos1).not.toBeNull()
    expect(initialPos2).not.toBeNull()

    // Press arrow key - should only move marker in focused instance
    await page.keyboard.press('ArrowRight')
    await page.waitForTimeout(300)

    const newPos1 = await marker1.boundingBox()
    const newPos2 = await marker2.boundingBox()
    expect(newPos1.x).toBeGreaterThan(initialPos1.x)
    expect(Math.abs(newPos2.x - initialPos2.x)).toBeLessThan(2)
    expect(Math.abs(newPos2.y - initialPos2.y)).toBeLessThan(2)

    // Switch focus to second instance
    await gramFrame2.click()
    await marker2.click()
    await page.waitForTimeout(200)

    const beforeSecondMove1 = await marker1.boundingBox()
    const beforeSecondMove2 = await marker2.boundingBox()

    await page.keyboard.press('ArrowLeft')
    await page.waitForTimeout(300)

    const afterSecondMove1 = await marker1.boundingBox()
    const afterSecondMove2 = await marker2.boundingBox()

    expect(Math.abs(afterSecondMove1.x - beforeSecondMove1.x)).toBeLessThan(2)
    expect(Math.abs(afterSecondMove1.y - beforeSecondMove1.y)).toBeLessThan(2)
    expect(afterSecondMove2.x).toBeLessThan(beforeSecondMove2.x)
  })
})
