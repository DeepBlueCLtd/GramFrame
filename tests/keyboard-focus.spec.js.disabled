import { test, expect } from '@playwright/test'

async function ensureMarkerExistsIn(container, page) {
  const analysisBtn = container.locator('button:has-text("Analysis"), [aria-label="Analysis"]')
  if (await analysisBtn.count()) {
    await analysisBtn.first().click()
    await page.waitForTimeout(50)
  }

  const target = container.locator('.gram-frame-hitlayer, .gram-frame-svg')
  await expect(target).toBeVisible({ timeout: 5000 })
  const box = await target.boundingBox()
  if (!box) throw new Error('No bounding box for click target')
  await page.mouse.click(box.x + box.width / 2, box.y + box.height / 2, { force: true })

  const row = container.locator('[data-panel="markers"] tbody tr, .markers table tbody tr')
  await expect(row.first()).toBeVisible({ timeout: 5000 })

  const marker = container.locator(
    '.gram-frame-marker, [data-test="marker-cross"], .analysis-marker, .cross-cursor-marker'
  ).first()
  return (await marker.count()) ? marker : row.first()
}

test.describe('Keyboard Focus with Multiple GramFrames', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('http://localhost:5173/debug-multiple.html')
    await page.waitForSelector('.gram-frame-container', { timeout: 10000 })
    const containers = await page.locator('.gram-frame-container').count()
    expect(containers).toBe(2)
  })

  test('should only update focused GramFrame on keyboard arrow keys', async ({ page }) => {
    const gramFrame1 = page.locator('.gram-frame-container').first()
    const gramFrame2 = page.locator('.gram-frame-container').nth(1)

    await ensureMarkerExistsIn(gramFrame1, page)
    await ensureMarkerExistsIn(gramFrame2, page)

    const getMarkerPosition = async (container) => {
      const marker = container.locator(
        '.gram-frame-marker, [data-test="marker-cross"], .analysis-marker, .cross-cursor-marker'
      ).first()
      const boundingBox = await marker.boundingBox()
      if (!boundingBox) return null
      return { x: boundingBox.x + boundingBox.width / 2, y: boundingBox.y + boundingBox.height / 2 }
    }

    const marker1InitialPos = await getMarkerPosition(gramFrame1)
    const marker2InitialPos = await getMarkerPosition(gramFrame2)
    expect(marker1InitialPos).not.toBeNull()
    expect(marker2InitialPos).not.toBeNull()

    await gramFrame1.click()
    const marker1 = gramFrame1.locator(
      '.gram-frame-marker, [data-test="marker-cross"], .analysis-marker, .cross-cursor-marker'
    ).first()
    await marker1.click()
    await page.waitForTimeout(100)

    await page.keyboard.press('ArrowRight')
    await page.waitForTimeout(200)

    const marker1NewPos = await getMarkerPosition(gramFrame1)
    const marker2NewPos = await getMarkerPosition(gramFrame2)
    expect(marker1NewPos.x).toBeGreaterThan(marker1InitialPos.x)
    expect(marker2NewPos.x).toBeCloseTo(marker2InitialPos.x, 1)
    expect(marker2NewPos.y).toBeCloseTo(marker2InitialPos.y, 1)
  })

  test('should switch focus when clicking on different GramFrame', async ({ page }) => {
    const gramFrame1 = page.locator('.gram-frame-container').first()
    const gramFrame2 = page.locator('.gram-frame-container').nth(1)

    await ensureMarkerExistsIn(gramFrame1, page)
    await ensureMarkerExistsIn(gramFrame2, page)

    const getMarkerPosition = async (container) => {
      const marker = container.locator(
        '.gram-frame-marker, [data-test="marker-cross"], .analysis-marker, .cross-cursor-marker'
      ).first()
      const boundingBox = await marker.boundingBox()
      if (!boundingBox) return null
      return { x: boundingBox.x + boundingBox.width / 2, y: boundingBox.y + boundingBox.height / 2 }
    }

    await gramFrame1.click()
    const marker1 = gramFrame1.locator(
      '.gram-frame-marker, [data-test="marker-cross"], .analysis-marker, .cross-cursor-marker'
    ).first()
    await marker1.click()
    const marker1InitialPos = await getMarkerPosition(gramFrame1)
    const marker2InitialPos = await getMarkerPosition(gramFrame2)

    await gramFrame2.click()
    const marker2 = gramFrame2.locator(
      '.gram-frame-marker, [data-test="marker-cross"], .analysis-marker, .cross-cursor-marker'
    ).first()
    await marker2.click()
    await page.waitForTimeout(100)

    await page.keyboard.press('ArrowLeft')
    await page.waitForTimeout(200)

    const marker1NewPos = await getMarkerPosition(gramFrame1)
    const marker2NewPos = await getMarkerPosition(gramFrame2)
    expect(marker1NewPos.x).toBeCloseTo(marker1InitialPos.x, 1)
    expect(marker1NewPos.y).toBeCloseTo(marker1InitialPos.y, 1)
    expect(marker2NewPos.x).toBeLessThan(marker2InitialPos.x)
  })

  test('should show visual focus indicator', async ({ page }) => {
    const gramFrame1 = page.locator('.gram-frame-container').first()
    const gramFrame2 = page.locator('.gram-frame-container').nth(1)

    const hasFocusClass1 = await gramFrame1.evaluate(el => el.classList.contains('gram-frame-focused'))
    const hasFocusClass2 = await gramFrame2.evaluate(el => el.classList.contains('gram-frame-focused'))
    expect(hasFocusClass1).toBe(false)
    expect(hasFocusClass2).toBe(false)

    await gramFrame1.click()
    await page.waitForTimeout(100)
    const hasFocusAfterClick1 = await gramFrame1.evaluate(el => el.classList.contains('gram-frame-focused'))
    const hasFocusAfterClick2 = await gramFrame2.evaluate(el => el.classList.contains('gram-frame-focused'))
    expect(hasFocusAfterClick1).toBe(true)
    expect(hasFocusAfterClick2).toBe(false)

    await gramFrame2.click()
    await page.waitForTimeout(100)
    const hasFocusAfterSwitch1 = await gramFrame1.evaluate(el => el.classList.contains('gram-frame-focused'))
    const hasFocusAfterSwitch2 = await gramFrame2.evaluate(el => el.classList.contains('gram-frame-focused'))
    expect(hasFocusAfterSwitch1).toBe(false)
    expect(hasFocusAfterSwitch2).toBe(true)
  })
})
